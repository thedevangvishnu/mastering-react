MANAGING STATES 

1 - Reacting to inputs with state


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1 - Reacting To Inputs with State

1.1 - Imperative vs Declarative programming

- Imperative:
    - giving exact instructions for manipulating UI elements.
    - more confusions and bugs because of catering for large numbers of changes based on many user interactions.
    - similar to "giving exact directions to the driver instead of letting him know the destination."
- Declarative: 
    - only giving the instruction of what the final UI looks like in each scenario.
    - react figures out how and when to manipulate UI based on user interactions.
    - similar to "booking destination through Uber (letting the driver know what the final output looks like) and letting the driver take you."

1.2 - How to change UI declaratively 

Five step procedure:

- Determine all different visual states of the component.
- Determine human and computer inputs that can trigger state update.
    - human inputs: clicking a button, typing in an input, scrolling, etc.
    - computer inputs: network response arriving, timeout completing, image loading. etc.
- Represent these states in memory using useState().
- Get rid of non-essential and redundant state variables.
    - remove state variables that are paradoxical. Confine them more.
    - remove state variables whose information are already contained in the other variable.
    - remove those state variables whose value are just inverse of another state variable. Use one of them only.
- Connect the event handlers to state setter funtions for their respective state variables. 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2 - Sharing state between components

2.1 - How to share state between same level components

    - Sometimes, components need to share state, meaning they should update and change together.
    - Till now, we have just learned that each component has their own state and they update 
    individually. Similar components do no communicate with each other.


In order for components to communicate with each other, we need to lift state up, meaning, remove each individual state from the respective components and add the state to their closest common parent component and then pass them as props to their child components. 

    - Remove state from child components.
    - Pass hard coded data to child components as props.
    - Add a state to the closest common parent component. 

2.2 - Controlled and uncontrolled components

2.2.1 - Uncontrolled components

        - Components that have their independent state and that cannot be controlled by their parent. 
        - The important information in these components are driven by their local state and not props.

2.2.2 - Controlled components

        - Components in which important information is controlled by their closest common parent through props.
        - These components generally do not have their independent states.

Though "controlled and uncontrolled inputs" are not legit-technical concepts. These are more "ways of thinking about components."


